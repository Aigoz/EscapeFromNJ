
---- IO -----				

	1. 文件IO 
	
		open read write close
		
		多用 with 语句配合
		
		strip() : 返回一个删除了'\n' 的字符串
		
	2. StringIO BytesIO 接口与文件IO类似，直接操作内存
	
---- 文件 & 目录 -----

	1. import os 
	
		系统相关模块，调用系统接口
		
	2. 	os.path.join: 		生成路径
		os.path.split:		
		os.path.splitext:	
		..... 自己搜 .....
		
---- 序列化 -----

可以理解成归档

	1. pickle 模块：
	
		python内置，不合其他语言共通，版本见可能存在差异，但是效率应该会比较高。
		
		pickle.dumps(d)	返回一个bytes串
		pickle.loads(bytes_d)
		pickle.dump(d, f)	f, file-like Object； 把d的内容序列化到 f中
		pickle.load(f)
		
	2. 	XML, JSON 这些通用归档格式  推荐JSON快，更流行
	
		看个JSON的例子：
		
				{
					"programmers": [{
						"firstName": "Brett",
						"lastName": "McLaughlin",
						"email": "aaaa"
					}, {
						"firstName": "Jason",
						"lastName": "Hunter",
						"email": "bbbb"
					}, {
						"firstName": "Elliotte",
						"lastName": "Harold",
						"email": "cccc"
					}],
					"authors": [{
						"firstName": "Isaac",
						"lastName": "Asimov",
						"genre": "sciencefiction"
					}, {
						"firstName": "Tad",
						"lastName": "Williams",
						"genre": "fantasy"
					}, {
						"firstName": "Frank",
						"lastName": "Peretti",
						"genre": "christianfiction"
					}],
					"musicians": [{
						"firstName": "Eric",
						"lastName": "Clapton",
						"instrument": "guitar"
					}, {
						"firstName": "Sergei",
						"lastName": "Rachmaninoff",
						"instrument": "piano"
					}]
				}
		
		所以JSON 和 PYTHON的对应关系：
		
				JSON类型			Python类型
				{}					dict
				[]					list
				"string"			str
				1234.56				int或float
				true/false			True/False
				null				None
				
				
		使用方法： 类似 pickle

				>>> import json
				>>> d = dict(name='Bob', age=20, score=88)
				>>> json.dumps(d)
				'{"age": 20, "score": 88, "name": "Bob"}'
				
				>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
				>>> json.loads(json_str)
				{'age': 20, 'score': 88, 'name': 'Bob'}
		
		
		但是json模块默认能够直接转换的 就只有上表中的这些类型，如果希望归档自己的类数据，就会返回类型错误
		
		这时候需要自己定义一个函数用来把类转换成 json 模块可以序列化的类型，然后通过转换后再序列化。（通过接口中的 default 参数来指定）
		
		通过例子，可以猜到json模块是把类型先通过defult函数转后，再序列化，如果default未指定，就是NONE 不转换
		
		例子：
				import json
				class Student(object):
					def __init__(self, name, age, score):
						self.name = name
						self.age = age
						self.score = score

				s = Student('Bob', 20, 88)
				
				def student2dict(std):
				return {
					'name': std.name,
					'age': std.age,
					'score': std.score
				}
				
		>>> print(json.dumps(s, default=student2dict))
		{"age": 20, "name": "Bob", "score": 88}
				
				#反转换
				
				def dict2student(d):
					return Student(d['name'], d['age'], d['score'])
					
		>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
		>>> print(json.loads(json_str, object_hook=dict2student))
		<__main__.Student object at 0x10cd3c190>
		
		
---- 进程 & 线程 -----

	1. 多进程
	
		Python支持多种多进程方式
		
			a. fork() 和linux 系统接口相同，windows不支持，复制一份当前进程作为子进程往下执行。
			
			b. multiprocessing 模块的 Process(起单进程) Pool(进程池)
			
			c. subprocess 模块，适用于外部进程，需要控制子进程的输入 输出
			
		进程间通信：
		
			a. 队列(Queue)
			
			b. 管道Pipes 
			
	2. 多线程
	
		锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，
		坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。
		其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，
		可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。
		
		使用锁的例子：
		
		balance = 0
		lock = threading.Lock()
		
		def change_it(n):
			# 先存后取，结果应该为0:
			global balance
			balance = balance + n
			balance = balance - n

		def run_thread(n):
			for i in range(100000):
				# 先要获取锁:
				lock.acquire()
				try:
					# 放心地改吧:
					change_it(n)
				finally:
					# 改完了一定要释放锁:
					lock.release()
					
		t1 = threading.Thread(target=run_thread, args=(5,))
		t2 = threading.Thread(target=run_thread, args=(8,))
		t1.start()
		t2.start()
		t1.join()
		t2.join()
		print(balance)

		
		因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，
		任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。
		这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，只能用到1个核。
		
		可以通过C扩展来有效利用多核，但是这样就失去了Python简单易用的特点。
		
	3. ThreadLocal
	
		作用就是线程的局部变量, 省了参数调用的代码。。
		
		例子：
		
				import threading

				# 创建全局ThreadLocal对象:
				local_school = threading.local()

				def process_student():
					# 获取当前线程关联的student:
					std = local_school.student
					print('Hello, %s (in %s)' % (std, threading.current_thread().name))

				def process_thread(name):
					# 绑定ThreadLocal的student:
					local_school.student = name
					process_student()

				t1 = threading.Thread(target= process_thread, args=('Alice',), name='Thread-A')
				t2 = threading.Thread(target= process_thread, args=('Bob',), name='Thread-B')
				t1.start()
				t2.start()
				t1.join()
				t2.join()
				
		ThreadLocal 最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。
		
	4. 计算密集型 & IO密集型
	
		计算密集型: 不适合python，任务需要处理大量计算，代码执行效率是关键。
		
		IO密集型： 适合python，任务需要处理大量IO交互，但是IO交互速度远低于CPU执行速率，开发维护效率 远比 代码执行效率重要。
		
	5. 异步IO
	
		后面会有单独章节介绍 异步IO（协程）。
		
		用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型，用异步IO编程模型来实现多任务是一个主要的趋势。
		
		对应到Python语言，单进程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。
		
	6. 分布式进程
	
		相当于吧子进程放到其他机器上执行。
		
		python里可以通过 multiprocessing 子模块 managers 轻松实现。
		
		例子见：  \廖雪峰Python教程练习题代码\进程线程\分布式进程   task_master.py 和 task_worker.py
		
		
---- 正则表达式 -----

	1. 具体关键字 忘记了百度下。
	
	2. re模块
	
		python 字符串带转义，所以如果要输入正则中的 \ 需要变成 \\。
		
		最好是通过 r'xxxx' 这种不带转义的方式来实现正则表达式
		
	3. 分组
	
			>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
			>>> m
			<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
			>>> m.group(0)
			'010-12345'
			>>> m.group(1)
			'010'
			>>> m.group(2)
			'12345'
			
	4. 正则预编译
	
		用compile 方法提前编译好正则表达式，后面可以直接使用，不需要每次match时重新编译正则。
		
			>>> import re
			# 编译:
			>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
			# 使用：
			>>> re_telephone.match('010-12345').groups()
			('010', '12345')
			>>> re_telephone.match('010-8086').groups()
			('010', '8086')
			
	