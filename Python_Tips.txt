---- 编码&字符串 ----

	0. Python 字符串使用 Unicode编码
	
	1. 中文字符读取
	
		# -*- coding: utf-8 -*-

	2. Python程序是大小写敏感的
	
	3. 编码科普：
		
		Unicode：统一编码，但是每个字符编码长度固定，传输效率低
		UTF-8：	 可变长编码，兼容ascii编码，英文只需1字节，中文通常3字节，传输效率高。
		目前实现通常： 计算机内存中使用Unicode，传输和文件保存用UTF-8；所以涉及到各种转码的需要了。
		
	4. a'xxx'： 表示字符串中每个字符用一个字节来表示，所以使用中文会报错
	
	5. 'str'.encode('xxx'):		xxx可以输入不同编码格式，用来转码为对应字节流； a'xxx'.decode('xxx') 同理相反，把字节流转为编码格式的字符串
	
	6. 格式符输出简写：  使用 %
		
		Example: （你应该能看懂~)
		print('Hi, you\'re reading %s\'s %s tips.' % ('杨海涛', 'Python'))

	7. Python还允许用r''表示''内部的字符串默认不转义

	8. Python允许用'''...'''的格式表示多行内容
	
	9. 
	
---- 数据类型 ----
	
	1. Bool：	Ture False 注意大小写
		
	2. 空值：	None （不等于0，0非空值，而是一个等于0的整数）
	
	3. 常量：	python 无常量，约定用大写变量表示
	
	4. //:      10//3 结果为 整数3 而不是浮点值
	
	5. 大小限制： python 无数值大小限制，超出范围用 inf 表示无限大
	
---- list & tuple & dict & set ----

	1. list: []
		
		a. xxx[-1] 表示倒数第一个
		
	2. tuple: () 同list，区别是无法修改
	
		a. tuple 陷阱：  a = (1) ，这里a是整形1，不是tuple；python的约定，如果只有一个元素，需要用','来消除歧义； a = (1,)
		
	3. dict: {'key':value, ....) 键值对

		a. 相关语法： 
		
			'key1' in dict1   输出Bool值  True or False
			
			dict1.get('key')  获取字典中的 key 值，如果没有则返回 None； 这个比直接用 dict1['key'] 好，因为直接取，没有的话会报错
			dict1.get('key', -1) 如果没有则返回 -1
			
			dict1.pop('key')  删除某个键值对
			
	4. set： 反正我是没用过set   s = set([1,2,.....])
	
---- 函数 -----

	1. pass： 表示啥也不做.  貌似我用这个来调试或者写基本框架的时候比较多。
	
	2. isinstance(x, (..类型))： 用来检查x的类型是否是第二个参数中的类型。  有用，通常用来检查函数入参
	
		if not isinstance(x, (int, float)):
			raise TypeError('bad operand type')
		else
			pass
	
	3. 函数默认参数必须指向不变对象！！ （这个不是语法要求，而是可变对象会出错）
	
		原因： 因为默认参数也是一个变量，当调用函数后，变量可能发生改变，而导致默认变量值改变。
		
	4. 根据3，所有变量定义时，能用不变的量尽量用不变的对象。
	
	5. 可变入参：	入参前加* ，入参相当于 tuple; 有用的一笔
				def funFoo(*args):
					for arg in args:
						print(arg)
					pass
					
				or
				
				args = [1, 2, 3]
				funFoo(*args)
			
	6. 关键字参数：  相当于传dict；  几种用法,忘了的话 baidu下
			
				def foo(a, b, **kw):
					pass
					
				def foo(a, b, *, kw1, kw2):	#这里也可以带默认参数
					pass
				foo(aa, bb, kw1 = 'keyword1', kw2 = 'keyword2')
				
	7. 5&6 python的好多代码中用的都挺多，比较灵活
	
	8. 据说python没有尾递归优化，所以递归还是可能会栈溢出的
	