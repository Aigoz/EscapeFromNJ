---- 编码&字符串 ----

	0. Python 字符串使用 Unicode编码
	
	1. 中文字符读取
	
		# -*- coding: utf-8 -*-

	2. Python程序是大小写敏感的
	
	3. 编码科普：
		
		Unicode：统一编码，但是每个字符编码长度固定，传输效率低
		UTF-8：	 可变长编码，兼容ascii编码，英文只需1字节，中文通常3字节，传输效率高。
		目前实现通常： 计算机内存中使用Unicode，传输和文件保存用UTF-8；所以涉及到各种转码的需要了。
		
	4. a'xxx'： 表示字符串中每个字符用一个字节来表示，所以使用中文会报错
	
	5. 'str'.encode('xxx'):		xxx可以输入不同编码格式，用来转码为对应字节流； a'xxx'.decode('xxx') 同理相反，把字节流转为编码格式的字符串
	
	6. 格式符输出简写：  使用 %
		
		Example: （你应该能看懂~)
		print('Hi, you\'re reading %s\'s %s tips.' % ('杨海涛', 'Python'))

	7. Python还允许用r''表示''内部的字符串默认不转义

	8. Python允许用'''...'''的格式表示多行内容
	
	9. 
	
---- 数据类型 ----
	
	1. Bool：	Ture False 注意大小写
		
	2. 空值：	None （不等于0，0非空值，而是一个等于0的整数）
	
	3. 常量：	python 无常量，约定用大写变量表示
	
	4. //:      10//3 结果为 整数3 而不是浮点值
	
	5. 大小限制： python 无数值大小限制，超出范围用 inf 表示无限大
	
---- list & tuple & dict & set ----

	1. list: []
		
		a. xxx[-1] 表示倒数第一个
		
	2. tuple: () 同list，区别是无法修改
	
		a. tuple 陷阱：  a = (1) ，这里a是整形1，不是tuple；python的约定，如果只有一个元素，需要用','来消除歧义； a = (1,)
		
	3. dict: {'key':value, ....) 键值对

		a. 相关语法： 
		
			'key1' in dict1   输出Bool值  True or False
			
			dict1.get('key')  获取字典中的 key 值，如果没有则返回 None； 这个比直接用 dict1['key'] 好，因为直接取，没有的话会报错
			dict1.get('key', -1) 如果没有则返回 -1
			
			dict1.pop('key')  删除某个键值对
			
	4. set： 反正我是没用过set   s = set([1,2,.....])
	
---- 函数 -----

	1. pass： 表示啥也不做.  貌似我用这个来调试或者写基本框架的时候比较多。
	
	2. isinstance(x, (..类型))： 用来检查x的类型是否是第二个参数中的类型。  有用，通常用来检查函数入参
	
		if not isinstance(x, (int, float)):
			raise TypeError('bad operand type')
		else
			pass
	
	3. 函数默认参数必须指向不变对象！！ （这个不是语法要求，而是可变对象会出错）
	
		原因： 因为默认参数也是一个变量，当调用函数后，变量可能发生改变，而导致默认变量值改变。
		
	4. 根据3，所有变量定义时，能用不变的量尽量用不变的对象。
	
	5. 可变入参：	入参前加* ，入参相当于 tuple; 有用的一笔
	
				def funFoo(*args):
					for arg in args:
						print(arg)
					pass
					
				or
				
				args = [1, 2, 3]
				funFoo(*args)
			
	6. 关键字参数：  相当于传dict；  几种用法,忘了的话 baidu下
			
				def foo(a, b, **kw):
					pass
					
				def foo(a, b, *, kw1, kw2):	#这里也可以带默认参数
					pass
				foo(aa, bb, kw1 = 'keyword1', kw2 = 'keyword2')
				
	7. 5&6 python的好多代码中用的都挺多，比较灵活
	
	8. 据说python没有尾递归优化，所以递归还是可能会栈溢出的
	
---- 函数.cont -----

	1. 切片： 这个可以用更通俗的表示来实现字符串，list...的截取操作 
	
		这里list的切片操作很强大，比如 l[::-1]能够实现list翻转，具体原理忘记了自己查
	
	2. 列表生成器： [ oper1  for key in xxxx......(支持表达式嵌套）....]	
	
		如： >>> [x * x for x in range(1, 11) if x % 2 == 0]
			[4, 16, 36, 64, 100]
			
			>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
			>>> [k + '=' + v for k, v in d.items()]
			['y=B', 'x=A', 'z=C']
			
	3. 生成器(generator)： 关键字 yield 和 StopIteration. 据说非常强大，没用过。

	4. map函数： 
	
		>>> def f(x):
		...     return x * x
		...
		>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
		>>> list(r)
		[1, 4, 9, 16, 25, 36, 49, 64, 81]
		
	5. reduce：
	
		reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
		
	6. list(): python里很多类型返回的都是 Iterator 类型，是一种惰性的序列，如果需要一次性获取到，通常都是用 list 转化为列表。
	
	7. filter(): filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。
	
			def is_odd(n):
				return n % 2 == 1

			list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
			# 结果: [1, 5, 9, 15]
	
	
---- 函数.cont.cont -----

	8.	闭包，函数作为参数返回：
	
		一个函数可以返回一个计算结果，也可以返回一个函数。
		返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。

		def count():										def count():                                                    
			fs = []                                             def f(j):                                                   
			for i in range(1, 4):                                   def g():                                                
				def f():                                            return j*j                                          
					 return i*i                             	return g                                                
				fs.append(f)                                	fs = []                                                     
			return fs                                           for i in range(1, 4):                                       
																		fs.append(f(i)) # f(i)Á¢¿Ì±»Ö´ÐÐ£¬Òò´ËiµÄµ±Ç°Öµ±»´«Èëf()
																return fs                                                   

		f1, f2, f3 = count() 	                            >>> f1, f2, f3 = count()  
		>>> f1()                                            >>> f1()                   
		9                                                   1                          
		>>> f2()                                            >>> f2()                   
		9                                                   4                          
		>>> f3()                                            >>> f3()                   
		9                                                   9          

			具体原因是，前者返回函数，返回时并未实际执行，i最后都体现为 3.  见： 
			http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431835236741e42daf5af6514f1a8917b8aaadff31bf000
			
			
	9. 匿名函数: lambda, 功能比较有限，只能使用一个表达式，返回值是表达式的结果。
	
	
	10. 装饰器： decorator   "@"    会经常使用在添加日志上
	
		作用： 现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
		
		例子：
		import functools

		def log(text):
			def decorator(func):
				@functools.wraps(func)
				def wrapper(*args, **kw):
					print('%s %s():' % (text, func.__name__))
					return func(*args, **kw)
				return wrapper
			return decorator
			
		@log('execute')
		def now():
			print('2016-3-25')
		
		
		>>> now()
		execute now():
		2016-3-25
		
		>>> now.__name__			#这里如果不加@wraps(func)的话，输出的就是 wrapper, 因为装饰器log返回的是wrapper函数
		'now'
			
		上面 @functools.wraps(func) 相当于， wrapper.__name__ = func.__name__的功能，也是个装饰器，装饰wrapper函数，用于改变函数签名，防止 @log 装饰的函数__name__改变。
		
	
	11. 更多的有用函数可以翻下自带的 functools 模块。
	
		比如： 偏函数partial， 当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。
		
				主要是利用了 函数入参的 *args和**kw 这两个特性实现的。  可以去翻下源码，或者看下这个网页：
				http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143184474383175eeea92a8b0439fab7b392a8a32f8fa000

				
---- 模块 -----

	1. 每个.py文件都是一个模块 module
	
	2. 包含多个模块的目录，就是一个 package
	
		请注意， 每一个包目录下面都会有一个__init__.py的文件， 这个文件是必须存在的， 否则， Python就把这个目录当成普通目录，而不是一个包。
		__init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是 包的名字
		
	3. 模块搜索路径:
	
		默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中：
		
		两种方法添加： 
		
			1. 直接修改sys.path 
				>>> import sys
				>>> sys.path.append('/Users/michael/my_py_scripts')
				
			2. 设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。
	
	
---- 面向对象 -----	

	1. @property  用来绑定属性，生成get set函数，直接调用属性时，可以直接调用get set函数。   （之前OBJC的时候 就有，类似的功能）
	
		直接给例子：
		
		class Student(object):

		@property
		def score(self):
			return self._score

		@score.setter
		def score(self, value):
			if not isinstance(value, int):
				raise ValueError('score must be an integer!')
			if value < 0 or value > 100:
				raise ValueError('score must between 0 ~ 100!')
			self._score = value
			
		
		>>> s = Student()
		>>> s.score = 60 	# OK，实际转化为s.set_score(60)
		>>> s.score 		# OK，实际转化为s.get_score()
		60
		>>> s.score = 9999
		Traceback (most recent call last):
		  ...
		ValueError: score must between 0 ~ 100!
		
		
		Tips： 可以通过只设置get函数，不设置setter，来实现只读函数。
		
		
	2. 多重继承 MixIn设计
	
		比如希望在TCP，UDP服务中实现多用户并发，就可以MixIn 多线程，多进程的类：
		
		class MyTCPServer(TCPServer, ForkingMixIn):	#多进程
			pass
			
		class MyUDPServer(UDPServer, ThreadingMixIn): #多线程
			pass
		
	
	3. 各种特殊用法
	
		__slots__： 用来限定动态绑定属性的名字
		__len__：   用于计算类长度  len()
		__str__:	类名字 返回 print(Student('Michael')) 输出的字符
		__repr__：  类似 __str__， 一般用于调试， 直接输入 类实例时返回的字符串。 可以偷懒成 __repr__ = __str__
		__iter__ __next__：  __iter__返回迭代对象， __next__ 用于获取下一个值，一般用于 for .... in 循环里，直到 StopIteration 异常时，结束循环。
		
				例子：
				class Fib(object):
				def __init__(self):
					self.a, self.b = 0, 1 # 初始化两个计数器a，b

				def __iter__(self):
					return self # 实例本身就是迭代对象，故返回自己

				def __next__(self):
					self.a, self.b = self.b, self.a + self.b # 计算下一个值
					if self.a > 100000: # 退出循环的条件
						raise StopIteration();
					return self.a # 返回下一个值
					
		__getitem__:  获取指定元素，像list 那样直接获取指定属性
						
						__getitem__入参可以是 int，也可是是切片对象 slice （比如list(range(100))[5:10]）；也可以是str（对应 dict）
						
		__setitem__ __delitem__： 与__getitem__对应
		__getattr__：  调用不存在的属性时，会调用这个函数。 这个作为动态语言，用途很广。
		__call__：		直接调用对象实例，会调用这个方法
		
		其他更多的可以去这里看： http://docs.python.org/3/reference/datamodel.html#special-method-names
		
	4. 枚举类（Enum）	
	
	5. 元类 （ metaclass） 
		一般用不到： http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000#0
		
		
---- 错误，调试，测试 -----	

	1. 错误处理： try 当遇到错误时，通过except类型，执行except中内容；否者执行else中内容；最后都会执行finally中内容（可选）
		
		支持多层调用。
		
		try:
			print('try...')
			r = 10 / int('2')
			print('result:', r)
		except ValueError as e:
			print('ValueError:', e)
		except ZeroDivisionError as e:
			print('ZeroDivisionError:', e)
		else:
			print('no error!')
		finally:
			print('finally...')
		print('END')
		
		
	2. 所有的错误类型都是类，派生于 BaseException。 except错误时，父类也会符合条件，可能导致子类未识别到。
	
		具体看： https://docs.python.org/3/library/exceptions.html#exception-hierarchy
				
	3. 记录错误日志： 可以通过内置的logging 模块，logging输出位置，需要提前配置
	
		例子：	
		import logging

		def foo(s):
			return 10 / int(s)

		def bar(s):
			return foo(s) * 2

		def main():
			try:
				bar('0')
			except Exception as e:
				logging.exception(e)

		main()
		print('END')
		
	4.  定义错误，抛出错误： 
	
		class FooError(ValueError):
			pass

		def foo(s):
			n = int(s)
			if n==0:
				raise FooError('invalid value: %s' % s)
			return 10 / n
			
	5. 处理异常时，如果当前函数处理不了，则直接通过 raise 返回给上层函数处理。
	
	6. 调试手段
		
		a. print()
		
		b. assert  运行时 带 -O 可屏蔽
		
			assert n != 0, 'n is zero!'
			
		c. logging, 最靠谱的手段  有debug，info，warning，error等几个级别
		
			import logging
			logging.basicConfig(level=logging.INFO)
			logging.info('n = %d' % n)
			
		d. pdb 类似 gdb, 以参数-m pdb启动  “python3 -m pdb err.py”  具体指令和GDB 差不多
			pdb.set_trace() 人为打断点
			
		e. IDE........